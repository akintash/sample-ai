/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Board as PrismaBoard,
  Task as PrismaTask,
  Project as PrismaProject,
} from "@prisma/client";

export class BoardServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BoardCountArgs, "select">): Promise<number> {
    return this.prisma.board.count(args);
  }

  async boards(args: Prisma.BoardFindManyArgs): Promise<PrismaBoard[]> {
    return this.prisma.board.findMany(args);
  }
  async board(args: Prisma.BoardFindUniqueArgs): Promise<PrismaBoard | null> {
    return this.prisma.board.findUnique(args);
  }
  async createBoard(args: Prisma.BoardCreateArgs): Promise<PrismaBoard> {
    return this.prisma.board.create(args);
  }
  async updateBoard(args: Prisma.BoardUpdateArgs): Promise<PrismaBoard> {
    return this.prisma.board.update(args);
  }
  async deleteBoard(args: Prisma.BoardDeleteArgs): Promise<PrismaBoard> {
    return this.prisma.board.delete(args);
  }

  async findTasks(
    parentId: string,
    args: Prisma.TaskFindManyArgs
  ): Promise<PrismaTask[]> {
    return this.prisma.board
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tasks(args);
  }

  async getProject(parentId: string): Promise<PrismaProject | null> {
    return this.prisma.board
      .findUnique({
        where: { id: parentId },
      })
      .project();
  }
}
